using Content.Client.Message;
using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.NanoMessage.Data;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.CartridgeLoader.Cartridges.NanoMessage;

[GenerateTypedNameReferences]
public sealed partial class NanoMessageUiFragment : BoxContainer
{
    private ulong _ownId;
    private NanoMessageConversation? _currentConversation;
    private Dictionary<ulong, string> _userNames = new();

    public Action<ulong, string>? OnMessageSend;
    public Action<ulong>? OnRecipientAdd, OnRecipientChoose;
    public Action? OnRefreshServer;

    public NanoMessageUiFragment()
    {
        RobustXamlLoader.Load(this);

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        AddRecipientButton.OnPressed += _ => AddRecipient();
        ChatSendButton.OnPressed += _ => SendMessage();
    }

    public void UpdateState(NanoMessageUiState state)
    {
        _ownId = state.OwnId;
        _currentConversation = state.OpenedConversation;
        _userNames.Clear();

        // Header
        ChatHeaderLabel.SetMarkup(state.ConnectedServerLabel is {} label
            ? Loc.GetString("nano-message-server-header", ("server", label))
            : Loc.GetString("nano-message-no-server-header"));

        BuildRecipients(state);
        BuildChatPane(state);

        // Disable controls if there is no conversation
        var hasConvo = state.OpenedConversation is not null;
        ChatSendButton.Disabled = !hasConvo;
        ChatFieldEdit.CanKeyboardFocus = hasConvo;
    }

    private void BuildRecipients(NanoMessageUiState state)
    {
        RecipientsContainer.RemoveAllChildren();

        var index = 0;
        foreach (var recipient in state.KnownRecipients)
        {
            if (recipient.Name is {} recipientName)
                _userNames[recipient.Id] = recipientName;
            else
                recipientName = Loc.GetString("nano-message-unknown-user-short");

            var entry = new NanoMessageEntryRecipient(++index, recipient, recipientName);
            RecipientsContainer.AddChild(entry);

            if (state.OpenedConversation is { } convo && (convo.User1 == recipient.Id || convo.User2 == recipient.Id))
                entry.Disabled = true;
            else
                entry.OnPressed += _ => ChooseRecipient(recipient.Id);
        }

        if (state.KnownRecipients.Count == 0)
        {
            RecipientsContainer.AddChild(new Label
            {
                Text = Loc.GetString("nano-message-no-recipients"),
                MaxWidth = 100
            });
        }
    }

    private void BuildChatPane(NanoMessageUiState state)
    {
        ChatContainer.RemoveAllChildren();

        var oldScroll = ChatScroll.GetScrollValue();
        if (state.OpenedConversation is { } conv)
        {
            var user1Name = ResolveUserName(conv.User1);
            var user2Name = ResolveUserName(conv.User2);

            foreach (var message in conv.Messages)
            {
                var name = message.Sender == conv.User1 ? user1Name
                    : message.Sender == conv.User2 ? user2Name
                    : ResolveUserName(message.Sender);

                var entry = new NanoMessageEntryMessage(message, name);
                ChatContainer.AddChild(entry);
            }

            ChatScroll.SetScrollValue(oldScroll);
        }
    }

    private string ResolveUserName(ulong id)
    {
        return _userNames.TryGetValue(id, out var name)
            ? Loc.GetString("nano-message-user", ("name", name), ("id", id))
            : Loc.GetString("nano-message-unknown-user", ("id", id));
    }

    private void ChooseRecipient(ulong id)
    {
        OnRecipientChoose?.Invoke(id);
    }

    private void AddRecipient()
    {
        // TODO: ???
        // QUICK DIALOG DOESNT EXIST CLIENTSIDE HALPPPPP
        //OnRecipientAdd?.Invoke();
    }

    private void SendMessage()
    {
        if (_currentConversation is not { } conv)
            return;

        var other = conv.User1 == _ownId ? conv.User2 : conv.User1;
        OnMessageSend?.Invoke(other, Rope.Collapse(ChatFieldEdit.TextRope));
    }

    private void RefreshServer()
    {
        OnRefreshServer?.Invoke();
    }
}

