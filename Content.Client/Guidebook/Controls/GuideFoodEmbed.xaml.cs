using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Chemistry.EntitySystems;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.Nutrition.EntitySystems;
using Content.Client.UserInterface.ControlExtensions;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Guidebook.Controls;

/// <summary>
///     Control for embedding a food recipe into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideFoodEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly FoodGuideDataSystem _foodGuideData;
    private readonly ISawmill _logger = default!;

    public GuideFoodEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _foodGuideData = _systemManager.GetEntitySystem<FoodGuideDataSystem>();
        _logger = Logger.GetSawmill("food guide");
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideFoodEmbed(FoodGuideEntry entry) : this()
    {
        GenerateControl(entry);
    }

    public bool CheckMatchesSearch(string query)
    {
        return FoodName.GetMessage()?.Contains(query) == true || FoodDescription.GetMessage()?.Contains(query) == true;
    }

    public void SetHiddenState(bool state, string query)
    {
        Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Food", out var id))
        {
            _logger.Error("Food embed tag is missing food prototype argument.");
            return false;
        }

        if (!_foodGuideData.TryGetData(id, out var data))
        {
            _logger.Warning($"Specified food prototype \"{id}\" does not have any known sources.");
            return false;
        }

        GenerateControl(data);

        control = this;
        return true;
    }

    private void GenerateControl(FoodGuideEntry data)
    {
        _prototype.TryIndex(data.Result, out var proto);

        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = proto is not null ? Color.FromHex("#162413") : Color.Red
        };

        var name = proto is not null ? proto.Name : Loc.GetString("guidebook-food-unknown-proto", ("id", data.Result));
        FoodName.SetMarkup(Loc.GetString("guidebook-food-name", ("name", name)));

        if (proto == null)
            return;

        #region Sources

        foreach (var source in data.Sources.OrderBy(it => it.OutputCount))
        {
            var control = new GuideFoodSource(proto, source, _prototype);
            SourcesDescriptionContainer.AddChild(control);
        }

        #endregion

        #region Composition

        foreach (var quantity in data.Composition)
        {
            var control = new GuideFoodComposition(_prototype, quantity);
            CompositionDescriptionContainer.AddChild(control);
        }

        #endregion

        FormattedMessage description = new();
        description.AddText(proto?.Description ?? string.Empty);
        // Cannot describe food flavor or smth beause food is entirely server-side

        FoodDescription.SetMessage(description);
    }
}
